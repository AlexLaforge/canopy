PEGParser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */
  
  var result = {
    _startRule: "start",
    
    _quoteString: function(s) {
      /*
       * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a string
       * literal except for the closing quote character, backslash, carriage
       * return, line separator, paragraph separator, and line feed. Any character
       * may appear in the form of an escape sequence.
       */
      return '"' + s
        .replace(/\\/g, '\\\\')        // backslash
        .replace(/"/g, '\\"')          // closing quote character
        .replace(/\r/g, '\\r')         // carriage return
        .replace(/\u2028/g, '\\u2028') // line separator
        .replace(/\u2029/g, '\\u2029') // paragraph separator
        .replace(/\n/g, '\\n')         // line feed
        + '"';
    },
    
    _arrayContains: function(array, value) {
      /*
       * Stupid IE does not have Array.prototype.indexOf, otherwise this function
       * would be a one-liner.
       */
      var length = array.length;
      for (var i = 0; i < length; i++) {
        if (array[i] === value) {
          return true;
        }
      }
      return false;
    },
    
    _matchFailed: function(failure) {
      if (this._pos > this._rightmostMatchFailuresPos) {
        this._rightmostMatchFailuresPos = this._pos;
        this._rightmostMatchFailuresExpected = [];
      }
      
      if (!this._arrayContains(this._rightmostMatchFailuresExpected, failure)) {
        this._rightmostMatchFailuresExpected.push(failure);
      }
    },
    
    _parse_start: function(context) {
      var cacheKey = "start" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos0 = this._pos;
      var result1 = [];
      var result10 = this._parse_space(context);
      while (result10 !== null) {
        result1.push(result10);
        var result10 = this._parse_space(context);
      }
      if (result1 !== null) {
        var result2 = this._parse_grammar_name(context);
        if (result2 !== null) {
          var savedPos1 = this._pos;
          var result7 = [];
          var result9 = this._parse_space(context);
          while (result9 !== null) {
            result7.push(result9);
            var result9 = this._parse_space(context);
          }
          if (result7 !== null) {
            var result8 = this._parse_grammar_rule(context);
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              this._pos = savedPos1;
            }
          } else {
            var result6 = null;
            this._pos = savedPos1;
          }
          if (result6 !== null) {
            var result3 = [];
            while (result6 !== null) {
              result3.push(result6);
              var savedPos1 = this._pos;
              var result7 = [];
              var result9 = this._parse_space(context);
              while (result9 !== null) {
                result7.push(result9);
                var result9 = this._parse_space(context);
              }
              if (result7 !== null) {
                var result8 = this._parse_grammar_rule(context);
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  this._pos = savedPos1;
                }
              } else {
                var result6 = null;
                this._pos = savedPos1;
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = [];
            var result5 = this._parse_space(context);
            while (result5 !== null) {
              result4.push(result5);
              var result5 = this._parse_space(context);
            }
            if (result4 !== null) {
              var result0 = [result1, result2, result3, result4];
            } else {
              var result0 = null;
              this._pos = savedPos0;
            }
          } else {
            var result0 = null;
            this._pos = savedPos0;
          }
        } else {
          var result0 = null;
          this._pos = savedPos0;
        }
      } else {
        var result0 = null;
        this._pos = savedPos0;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result0
      };
      return result0;
    },
    
    _parse_grammar_name: function(context) {
      var cacheKey = "grammar_name" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos2 = this._pos;
      if (this._input.substr(this._pos, 8) === "grammar ") {
        var result12 = "grammar ";
        this._pos += 8;
      } else {
        var result12 = null;
        if (context.reportMatchFailures) {
          this._matchFailed(this._quoteString("grammar "));
        }
      }
      if (result12 !== null) {
        var result13 = this._parse_object_identifier(context);
        if (result13 !== null) {
          var result11 = [result12, result13];
        } else {
          var result11 = null;
          this._pos = savedPos2;
        }
      } else {
        var result11 = null;
        this._pos = savedPos2;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result11
      };
      return result11;
    },
    
    _parse_grammar_rule: function(context) {
      var cacheKey = "grammar_rule" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos3 = this._pos;
      var result15 = this._parse_identifier(context);
      if (result15 !== null) {
        var result16 = this._parse_assignment(context);
        if (result16 !== null) {
          var result17 = this._parse_parsing_expression(context);
          if (result17 !== null) {
            var result14 = [result15, result16, result17];
          } else {
            var result14 = null;
            this._pos = savedPos3;
          }
        } else {
          var result14 = null;
          this._pos = savedPos3;
        }
      } else {
        var result14 = null;
        this._pos = savedPos3;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result14
      };
      return result14;
    },
    
    _parse_assignment: function(context) {
      var cacheKey = "assignment" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos4 = this._pos;
      var result23 = this._parse_space(context);
      if (result23 !== null) {
        var result19 = [];
        while (result23 !== null) {
          result19.push(result23);
          var result23 = this._parse_space(context);
        }
      } else {
        var result19 = null;
      }
      if (result19 !== null) {
        if (this._input.substr(this._pos, 2) === "<-") {
          var result20 = "<-";
          this._pos += 2;
        } else {
          var result20 = null;
          if (context.reportMatchFailures) {
            this._matchFailed(this._quoteString("<-"));
          }
        }
        if (result20 !== null) {
          var result22 = this._parse_space(context);
          if (result22 !== null) {
            var result21 = [];
            while (result22 !== null) {
              result21.push(result22);
              var result22 = this._parse_space(context);
            }
          } else {
            var result21 = null;
          }
          if (result21 !== null) {
            var result18 = [result19, result20, result21];
          } else {
            var result18 = null;
            this._pos = savedPos4;
          }
        } else {
          var result18 = null;
          this._pos = savedPos4;
        }
      } else {
        var result18 = null;
        this._pos = savedPos4;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result18
      };
      return result18;
    },
    
    _parse_parsing_expression: function(context) {
      var cacheKey = "parsing_expression" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var result26 = this._parse_choice_expression(context);
      if (result26 !== null) {
        var result24 = result26;
      } else {
        var result25 = this._parse_choice_part(context);
        if (result25 !== null) {
          var result24 = result25;
        } else {
          var result24 = null;;
        };
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result24
      };
      return result24;
    },
    
    _parse_parenthesised_expression: function(context) {
      var cacheKey = "parenthesised_expression" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos5 = this._pos;
      if (this._input.substr(this._pos, 1) === "(") {
        var result28 = "(";
        this._pos += 1;
      } else {
        var result28 = null;
        if (context.reportMatchFailures) {
          this._matchFailed(this._quoteString("("));
        }
      }
      if (result28 !== null) {
        var result29 = [];
        var result34 = this._parse_space(context);
        while (result34 !== null) {
          result29.push(result34);
          var result34 = this._parse_space(context);
        }
        if (result29 !== null) {
          var result30 = this._parse_parsing_expression(context);
          if (result30 !== null) {
            var result31 = [];
            var result33 = this._parse_space(context);
            while (result33 !== null) {
              result31.push(result33);
              var result33 = this._parse_space(context);
            }
            if (result31 !== null) {
              if (this._input.substr(this._pos, 1) === ")") {
                var result32 = ")";
                this._pos += 1;
              } else {
                var result32 = null;
                if (context.reportMatchFailures) {
                  this._matchFailed(this._quoteString(")"));
                }
              }
              if (result32 !== null) {
                var result27 = [result28, result29, result30, result31, result32];
              } else {
                var result27 = null;
                this._pos = savedPos5;
              }
            } else {
              var result27 = null;
              this._pos = savedPos5;
            }
          } else {
            var result27 = null;
            this._pos = savedPos5;
          }
        } else {
          var result27 = null;
          this._pos = savedPos5;
        }
      } else {
        var result27 = null;
        this._pos = savedPos5;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result27
      };
      return result27;
    },
    
    _parse_choice_expression: function(context) {
      var cacheKey = "choice_expression" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos6 = this._pos;
      var result36 = this._parse_choice_part(context);
      if (result36 !== null) {
        var savedPos7 = this._pos;
        var result44 = this._parse_space(context);
        if (result44 !== null) {
          var result39 = [];
          while (result44 !== null) {
            result39.push(result44);
            var result44 = this._parse_space(context);
          }
        } else {
          var result39 = null;
        }
        if (result39 !== null) {
          if (this._input.substr(this._pos, 1) === "/") {
            var result40 = "/";
            this._pos += 1;
          } else {
            var result40 = null;
            if (context.reportMatchFailures) {
              this._matchFailed(this._quoteString("/"));
            }
          }
          if (result40 !== null) {
            var result43 = this._parse_space(context);
            if (result43 !== null) {
              var result41 = [];
              while (result43 !== null) {
                result41.push(result43);
                var result43 = this._parse_space(context);
              }
            } else {
              var result41 = null;
            }
            if (result41 !== null) {
              var result42 = this._parse_choice_part(context);
              if (result42 !== null) {
                var result38 = [result39, result40, result41, result42];
              } else {
                var result38 = null;
                this._pos = savedPos7;
              }
            } else {
              var result38 = null;
              this._pos = savedPos7;
            }
          } else {
            var result38 = null;
            this._pos = savedPos7;
          }
        } else {
          var result38 = null;
          this._pos = savedPos7;
        }
        if (result38 !== null) {
          var result37 = [];
          while (result38 !== null) {
            result37.push(result38);
            var savedPos7 = this._pos;
            var result44 = this._parse_space(context);
            if (result44 !== null) {
              var result39 = [];
              while (result44 !== null) {
                result39.push(result44);
                var result44 = this._parse_space(context);
              }
            } else {
              var result39 = null;
            }
            if (result39 !== null) {
              if (this._input.substr(this._pos, 1) === "/") {
                var result40 = "/";
                this._pos += 1;
              } else {
                var result40 = null;
                if (context.reportMatchFailures) {
                  this._matchFailed(this._quoteString("/"));
                }
              }
              if (result40 !== null) {
                var result43 = this._parse_space(context);
                if (result43 !== null) {
                  var result41 = [];
                  while (result43 !== null) {
                    result41.push(result43);
                    var result43 = this._parse_space(context);
                  }
                } else {
                  var result41 = null;
                }
                if (result41 !== null) {
                  var result42 = this._parse_choice_part(context);
                  if (result42 !== null) {
                    var result38 = [result39, result40, result41, result42];
                  } else {
                    var result38 = null;
                    this._pos = savedPos7;
                  }
                } else {
                  var result38 = null;
                  this._pos = savedPos7;
                }
              } else {
                var result38 = null;
                this._pos = savedPos7;
              }
            } else {
              var result38 = null;
              this._pos = savedPos7;
            }
          }
        } else {
          var result37 = null;
        }
        if (result37 !== null) {
          var result35 = [result36, result37];
        } else {
          var result35 = null;
          this._pos = savedPos6;
        }
      } else {
        var result35 = null;
        this._pos = savedPos6;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result35
      };
      return result35;
    },
    
    _parse_choice_part: function(context) {
      var cacheKey = "choice_part" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos8 = this._pos;
      var result53 = this._parse_sequence_expression(context);
      if (result53 !== null) {
        var result46 = result53;
      } else {
        var result52 = this._parse_sequence_part(context);
        if (result52 !== null) {
          var result46 = result52;
        } else {
          var result46 = null;;
        };
      }
      if (result46 !== null) {
        var savedPos9 = this._pos;
        var result51 = this._parse_space(context);
        if (result51 !== null) {
          var result49 = [];
          while (result51 !== null) {
            result49.push(result51);
            var result51 = this._parse_space(context);
          }
        } else {
          var result49 = null;
        }
        if (result49 !== null) {
          var result50 = this._parse_type_expression(context);
          if (result50 !== null) {
            var result48 = [result49, result50];
          } else {
            var result48 = null;
            this._pos = savedPos9;
          }
        } else {
          var result48 = null;
          this._pos = savedPos9;
        }
        var result47 = result48 !== null ? result48 : '';
        if (result47 !== null) {
          var result45 = [result46, result47];
        } else {
          var result45 = null;
          this._pos = savedPos8;
        }
      } else {
        var result45 = null;
        this._pos = savedPos8;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result45
      };
      return result45;
    },
    
    _parse_type_expression: function(context) {
      var cacheKey = "type_expression" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos10 = this._pos;
      if (this._input.substr(this._pos, 1) === "<") {
        var result55 = "<";
        this._pos += 1;
      } else {
        var result55 = null;
        if (context.reportMatchFailures) {
          this._matchFailed(this._quoteString("<"));
        }
      }
      if (result55 !== null) {
        var result56 = this._parse_object_identifier(context);
        if (result56 !== null) {
          if (this._input.substr(this._pos, 1) === ">") {
            var result57 = ">";
            this._pos += 1;
          } else {
            var result57 = null;
            if (context.reportMatchFailures) {
              this._matchFailed(this._quoteString(">"));
            }
          }
          if (result57 !== null) {
            var result54 = [result55, result56, result57];
          } else {
            var result54 = null;
            this._pos = savedPos10;
          }
        } else {
          var result54 = null;
          this._pos = savedPos10;
        }
      } else {
        var result54 = null;
        this._pos = savedPos10;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result54
      };
      return result54;
    },
    
    _parse_sequence_expression: function(context) {
      var cacheKey = "sequence_expression" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos11 = this._pos;
      var result59 = this._parse_sequence_part(context);
      if (result59 !== null) {
        var savedPos12 = this._pos;
        var result64 = this._parse_space(context);
        if (result64 !== null) {
          var result62 = [];
          while (result64 !== null) {
            result62.push(result64);
            var result64 = this._parse_space(context);
          }
        } else {
          var result62 = null;
        }
        if (result62 !== null) {
          var result63 = this._parse_sequence_part(context);
          if (result63 !== null) {
            var result61 = [result62, result63];
          } else {
            var result61 = null;
            this._pos = savedPos12;
          }
        } else {
          var result61 = null;
          this._pos = savedPos12;
        }
        if (result61 !== null) {
          var result60 = [];
          while (result61 !== null) {
            result60.push(result61);
            var savedPos12 = this._pos;
            var result64 = this._parse_space(context);
            if (result64 !== null) {
              var result62 = [];
              while (result64 !== null) {
                result62.push(result64);
                var result64 = this._parse_space(context);
              }
            } else {
              var result62 = null;
            }
            if (result62 !== null) {
              var result63 = this._parse_sequence_part(context);
              if (result63 !== null) {
                var result61 = [result62, result63];
              } else {
                var result61 = null;
                this._pos = savedPos12;
              }
            } else {
              var result61 = null;
              this._pos = savedPos12;
            }
          }
        } else {
          var result60 = null;
        }
        if (result60 !== null) {
          var result58 = [result59, result60];
        } else {
          var result58 = null;
          this._pos = savedPos11;
        }
      } else {
        var result58 = null;
        this._pos = savedPos11;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result58
      };
      return result58;
    },
    
    _parse_sequence_part: function(context) {
      var cacheKey = "sequence_part" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos13 = this._pos;
      var result70 = this._parse_label(context);
      var result66 = result70 !== null ? result70 : '';
      if (result66 !== null) {
        var result69 = this._parse_quantified_atom(context);
        if (result69 !== null) {
          var result67 = result69;
        } else {
          var result68 = this._parse_atom(context);
          if (result68 !== null) {
            var result67 = result68;
          } else {
            var result67 = null;;
          };
        }
        if (result67 !== null) {
          var result65 = [result66, result67];
        } else {
          var result65 = null;
          this._pos = savedPos13;
        }
      } else {
        var result65 = null;
        this._pos = savedPos13;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result65
      };
      return result65;
    },
    
    _parse_quantified_atom: function(context) {
      var cacheKey = "quantified_atom" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos14 = this._pos;
      var result72 = this._parse_atom(context);
      if (result72 !== null) {
        var result73 = this._parse_quantifier(context);
        if (result73 !== null) {
          var result71 = [result72, result73];
        } else {
          var result71 = null;
          this._pos = savedPos14;
        }
      } else {
        var result71 = null;
        this._pos = savedPos14;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result71
      };
      return result71;
    },
    
    _parse_atom: function(context) {
      var cacheKey = "atom" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var result80 = this._parse_parenthesised_expression(context);
      if (result80 !== null) {
        var result74 = result80;
      } else {
        var result79 = this._parse_predicated_atom(context);
        if (result79 !== null) {
          var result74 = result79;
        } else {
          var result78 = this._parse_reference_expression(context);
          if (result78 !== null) {
            var result74 = result78;
          } else {
            var result77 = this._parse_string_expression(context);
            if (result77 !== null) {
              var result74 = result77;
            } else {
              var result76 = this._parse_any_char_expression(context);
              if (result76 !== null) {
                var result74 = result76;
              } else {
                var result75 = this._parse_char_class_expression(context);
                if (result75 !== null) {
                  var result74 = result75;
                } else {
                  var result74 = null;;
                };
              };
            };
          };
        };
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result74
      };
      return result74;
    },
    
    _parse_predicated_atom: function(context) {
      var cacheKey = "predicated_atom" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos15 = this._pos;
      if (this._input.substr(this._pos, 1) === "&") {
        var result85 = "&";
        this._pos += 1;
      } else {
        var result85 = null;
        if (context.reportMatchFailures) {
          this._matchFailed(this._quoteString("&"));
        }
      }
      if (result85 !== null) {
        var result82 = result85;
      } else {
        if (this._input.substr(this._pos, 1) === "!") {
          var result84 = "!";
          this._pos += 1;
        } else {
          var result84 = null;
          if (context.reportMatchFailures) {
            this._matchFailed(this._quoteString("!"));
          }
        }
        if (result84 !== null) {
          var result82 = result84;
        } else {
          var result82 = null;;
        };
      }
      if (result82 !== null) {
        var result83 = this._parse_atom(context);
        if (result83 !== null) {
          var result81 = [result82, result83];
        } else {
          var result81 = null;
          this._pos = savedPos15;
        }
      } else {
        var result81 = null;
        this._pos = savedPos15;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result81
      };
      return result81;
    },
    
    _parse_reference_expression: function(context) {
      var cacheKey = "reference_expression" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos16 = this._pos;
      var result87 = this._parse_identifier(context);
      if (result87 !== null) {
        var savedPos17 = this._pos;
        var savedReportMatchFailuresVar0 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result89 = this._parse_assignment(context);
        context.reportMatchFailures = savedReportMatchFailuresVar0;
        if (result89 === null) {
          var result88 = '';
        } else {
          var result88 = null;
          this._pos = savedPos17;
        }
        if (result88 !== null) {
          var result86 = [result87, result88];
        } else {
          var result86 = null;
          this._pos = savedPos16;
        }
      } else {
        var result86 = null;
        this._pos = savedPos16;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result86
      };
      return result86;
    },
    
    _parse_string_expression: function(context) {
      var cacheKey = "string_expression" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos18 = this._pos;
      if (this._input.substr(this._pos, 1) === "\"") {
        var result91 = "\"";
        this._pos += 1;
      } else {
        var result91 = null;
        if (context.reportMatchFailures) {
          this._matchFailed(this._quoteString("\""));
        }
      }
      if (result91 !== null) {
        var result92 = [];
        var savedPos19 = this._pos;
        if (this._input.substr(this._pos, 1) === "\\") {
          var result97 = "\\";
          this._pos += 1;
        } else {
          var result97 = null;
          if (context.reportMatchFailures) {
            this._matchFailed(this._quoteString("\\"));
          }
        }
        if (result97 !== null) {
          if (this._input.length > this._pos) {
            var result98 = this._input.charAt(this._pos);
            this._pos++;
          } else {
            var result98 = null;
            if (context.reportMatchFailures) {
              this._matchFailed('any character');
            }
          }
          if (result98 !== null) {
            var result96 = [result97, result98];
          } else {
            var result96 = null;
            this._pos = savedPos19;
          }
        } else {
          var result96 = null;
          this._pos = savedPos19;
        }
        if (result96 !== null) {
          var result94 = result96;
        } else {
          if (this._input.substr(this._pos).match(/^[^"]/) !== null) {
            var result95 = this._input.charAt(this._pos);
            this._pos++;
          } else {
            var result95 = null;
            if (context.reportMatchFailures) {
              this._matchFailed('[' + "^\"" + ']');
            }
          }
          if (result95 !== null) {
            var result94 = result95;
          } else {
            var result94 = null;;
          };
        }
        while (result94 !== null) {
          result92.push(result94);
          var savedPos19 = this._pos;
          if (this._input.substr(this._pos, 1) === "\\") {
            var result97 = "\\";
            this._pos += 1;
          } else {
            var result97 = null;
            if (context.reportMatchFailures) {
              this._matchFailed(this._quoteString("\\"));
            }
          }
          if (result97 !== null) {
            if (this._input.length > this._pos) {
              var result98 = this._input.charAt(this._pos);
              this._pos++;
            } else {
              var result98 = null;
              if (context.reportMatchFailures) {
                this._matchFailed('any character');
              }
            }
            if (result98 !== null) {
              var result96 = [result97, result98];
            } else {
              var result96 = null;
              this._pos = savedPos19;
            }
          } else {
            var result96 = null;
            this._pos = savedPos19;
          }
          if (result96 !== null) {
            var result94 = result96;
          } else {
            if (this._input.substr(this._pos).match(/^[^"]/) !== null) {
              var result95 = this._input.charAt(this._pos);
              this._pos++;
            } else {
              var result95 = null;
              if (context.reportMatchFailures) {
                this._matchFailed('[' + "^\"" + ']');
              }
            }
            if (result95 !== null) {
              var result94 = result95;
            } else {
              var result94 = null;;
            };
          }
        }
        if (result92 !== null) {
          if (this._input.substr(this._pos, 1) === "\"") {
            var result93 = "\"";
            this._pos += 1;
          } else {
            var result93 = null;
            if (context.reportMatchFailures) {
              this._matchFailed(this._quoteString("\""));
            }
          }
          if (result93 !== null) {
            var result90 = [result91, result92, result93];
          } else {
            var result90 = null;
            this._pos = savedPos18;
          }
        } else {
          var result90 = null;
          this._pos = savedPos18;
        }
      } else {
        var result90 = null;
        this._pos = savedPos18;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result90
      };
      return result90;
    },
    
    _parse_any_char_expression: function(context) {
      var cacheKey = "any_char_expression" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      if (this._input.substr(this._pos, 1) === ".") {
        var result99 = ".";
        this._pos += 1;
      } else {
        var result99 = null;
        if (context.reportMatchFailures) {
          this._matchFailed(this._quoteString("."));
        }
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result99
      };
      return result99;
    },
    
    _parse_char_class_expression: function(context) {
      var cacheKey = "char_class_expression" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos20 = this._pos;
      if (this._input.substr(this._pos, 1) === "[") {
        var result101 = "[";
        this._pos += 1;
      } else {
        var result101 = null;
        if (context.reportMatchFailures) {
          this._matchFailed(this._quoteString("["));
        }
      }
      if (result101 !== null) {
        if (this._input.substr(this._pos, 1) === "^") {
          var result110 = "^";
          this._pos += 1;
        } else {
          var result110 = null;
          if (context.reportMatchFailures) {
            this._matchFailed(this._quoteString("^"));
          }
        }
        var result102 = result110 !== null ? result110 : '';
        if (result102 !== null) {
          var savedPos21 = this._pos;
          if (this._input.substr(this._pos, 1) === "\\") {
            var result108 = "\\";
            this._pos += 1;
          } else {
            var result108 = null;
            if (context.reportMatchFailures) {
              this._matchFailed(this._quoteString("\\"));
            }
          }
          if (result108 !== null) {
            if (this._input.length > this._pos) {
              var result109 = this._input.charAt(this._pos);
              this._pos++;
            } else {
              var result109 = null;
              if (context.reportMatchFailures) {
                this._matchFailed('any character');
              }
            }
            if (result109 !== null) {
              var result107 = [result108, result109];
            } else {
              var result107 = null;
              this._pos = savedPos21;
            }
          } else {
            var result107 = null;
            this._pos = savedPos21;
          }
          if (result107 !== null) {
            var result105 = result107;
          } else {
            if (this._input.substr(this._pos).match(/^[^\]]/) !== null) {
              var result106 = this._input.charAt(this._pos);
              this._pos++;
            } else {
              var result106 = null;
              if (context.reportMatchFailures) {
                this._matchFailed('[' + "^\\]" + ']');
              }
            }
            if (result106 !== null) {
              var result105 = result106;
            } else {
              var result105 = null;;
            };
          }
          if (result105 !== null) {
            var result103 = [];
            while (result105 !== null) {
              result103.push(result105);
              var savedPos21 = this._pos;
              if (this._input.substr(this._pos, 1) === "\\") {
                var result108 = "\\";
                this._pos += 1;
              } else {
                var result108 = null;
                if (context.reportMatchFailures) {
                  this._matchFailed(this._quoteString("\\"));
                }
              }
              if (result108 !== null) {
                if (this._input.length > this._pos) {
                  var result109 = this._input.charAt(this._pos);
                  this._pos++;
                } else {
                  var result109 = null;
                  if (context.reportMatchFailures) {
                    this._matchFailed('any character');
                  }
                }
                if (result109 !== null) {
                  var result107 = [result108, result109];
                } else {
                  var result107 = null;
                  this._pos = savedPos21;
                }
              } else {
                var result107 = null;
                this._pos = savedPos21;
              }
              if (result107 !== null) {
                var result105 = result107;
              } else {
                if (this._input.substr(this._pos).match(/^[^\]]/) !== null) {
                  var result106 = this._input.charAt(this._pos);
                  this._pos++;
                } else {
                  var result106 = null;
                  if (context.reportMatchFailures) {
                    this._matchFailed('[' + "^\\]" + ']');
                  }
                }
                if (result106 !== null) {
                  var result105 = result106;
                } else {
                  var result105 = null;;
                };
              }
            }
          } else {
            var result103 = null;
          }
          if (result103 !== null) {
            if (this._input.substr(this._pos, 1) === "]") {
              var result104 = "]";
              this._pos += 1;
            } else {
              var result104 = null;
              if (context.reportMatchFailures) {
                this._matchFailed(this._quoteString("]"));
              }
            }
            if (result104 !== null) {
              var result100 = [result101, result102, result103, result104];
            } else {
              var result100 = null;
              this._pos = savedPos20;
            }
          } else {
            var result100 = null;
            this._pos = savedPos20;
          }
        } else {
          var result100 = null;
          this._pos = savedPos20;
        }
      } else {
        var result100 = null;
        this._pos = savedPos20;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result100
      };
      return result100;
    },
    
    _parse_label: function(context) {
      var cacheKey = "label" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos22 = this._pos;
      var result112 = this._parse_identifier(context);
      if (result112 !== null) {
        if (this._input.substr(this._pos, 1) === ":") {
          var result113 = ":";
          this._pos += 1;
        } else {
          var result113 = null;
          if (context.reportMatchFailures) {
            this._matchFailed(this._quoteString(":"));
          }
        }
        if (result113 !== null) {
          var result111 = [result112, result113];
        } else {
          var result111 = null;
          this._pos = savedPos22;
        }
      } else {
        var result111 = null;
        this._pos = savedPos22;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result111
      };
      return result111;
    },
    
    _parse_object_identifier: function(context) {
      var cacheKey = "object_identifier" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos23 = this._pos;
      var result115 = this._parse_identifier(context);
      if (result115 !== null) {
        var result116 = [];
        var savedPos24 = this._pos;
        if (this._input.substr(this._pos, 1) === ".") {
          var result118 = ".";
          this._pos += 1;
        } else {
          var result118 = null;
          if (context.reportMatchFailures) {
            this._matchFailed(this._quoteString("."));
          }
        }
        if (result118 !== null) {
          var result119 = this._parse_identifier(context);
          if (result119 !== null) {
            var result117 = [result118, result119];
          } else {
            var result117 = null;
            this._pos = savedPos24;
          }
        } else {
          var result117 = null;
          this._pos = savedPos24;
        }
        while (result117 !== null) {
          result116.push(result117);
          var savedPos24 = this._pos;
          if (this._input.substr(this._pos, 1) === ".") {
            var result118 = ".";
            this._pos += 1;
          } else {
            var result118 = null;
            if (context.reportMatchFailures) {
              this._matchFailed(this._quoteString("."));
            }
          }
          if (result118 !== null) {
            var result119 = this._parse_identifier(context);
            if (result119 !== null) {
              var result117 = [result118, result119];
            } else {
              var result117 = null;
              this._pos = savedPos24;
            }
          } else {
            var result117 = null;
            this._pos = savedPos24;
          }
        }
        if (result116 !== null) {
          var result114 = [result115, result116];
        } else {
          var result114 = null;
          this._pos = savedPos23;
        }
      } else {
        var result114 = null;
        this._pos = savedPos23;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result114
      };
      return result114;
    },
    
    _parse_identifier: function(context) {
      var cacheKey = "identifier" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      var savedPos25 = this._pos;
      if (this._input.substr(this._pos).match(/^[a-zA-Z_$]/) !== null) {
        var result121 = this._input.charAt(this._pos);
        this._pos++;
      } else {
        var result121 = null;
        if (context.reportMatchFailures) {
          this._matchFailed('[' + "a-zA-Z_$" + ']');
        }
      }
      if (result121 !== null) {
        var result122 = [];
        if (this._input.substr(this._pos).match(/^[a-zA-Z0-9_$]/) !== null) {
          var result123 = this._input.charAt(this._pos);
          this._pos++;
        } else {
          var result123 = null;
          if (context.reportMatchFailures) {
            this._matchFailed('[' + "a-zA-Z0-9_$" + ']');
          }
        }
        while (result123 !== null) {
          result122.push(result123);
          if (this._input.substr(this._pos).match(/^[a-zA-Z0-9_$]/) !== null) {
            var result123 = this._input.charAt(this._pos);
            this._pos++;
          } else {
            var result123 = null;
            if (context.reportMatchFailures) {
              this._matchFailed('[' + "a-zA-Z0-9_$" + ']');
            }
          }
        }
        if (result122 !== null) {
          var result120 = [result121, result122];
        } else {
          var result120 = null;
          this._pos = savedPos25;
        }
      } else {
        var result120 = null;
        this._pos = savedPos25;
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result120
      };
      return result120;
    },
    
    _parse_quantifier: function(context) {
      var cacheKey = "quantifier" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      if (this._input.substr(this._pos, 1) === "?") {
        var result127 = "?";
        this._pos += 1;
      } else {
        var result127 = null;
        if (context.reportMatchFailures) {
          this._matchFailed(this._quoteString("?"));
        }
      }
      if (result127 !== null) {
        var result124 = result127;
      } else {
        if (this._input.substr(this._pos, 1) === "*") {
          var result126 = "*";
          this._pos += 1;
        } else {
          var result126 = null;
          if (context.reportMatchFailures) {
            this._matchFailed(this._quoteString("*"));
          }
        }
        if (result126 !== null) {
          var result124 = result126;
        } else {
          if (this._input.substr(this._pos, 1) === "+") {
            var result125 = "+";
            this._pos += 1;
          } else {
            var result125 = null;
            if (context.reportMatchFailures) {
              this._matchFailed(this._quoteString("+"));
            }
          }
          if (result125 !== null) {
            var result124 = result125;
          } else {
            var result124 = null;;
          };
        };
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result124
      };
      return result124;
    },
    
    _parse_space: function(context) {
      var cacheKey = "space" + '@' + this._pos;
      var cachedResult = this._cache[cacheKey];
      if (cachedResult !== undefined) {
        this._pos = cachedResult.nextPos;
        return cachedResult.result;
      }
      
      var pos = this._pos;
      
      
      if (this._input.substr(this._pos).match(/^[\s\n\r\t]/) !== null) {
        var result128 = this._input.charAt(this._pos);
        this._pos++;
      } else {
        var result128 = null;
        if (context.reportMatchFailures) {
          this._matchFailed('[' + "\\s\\n\\r\\t" + ']');
        }
      }
      
      
      
      this._cache[cacheKey] = {
        nextPos: this._pos,
        result:  result128
      };
      return result128;
    },
    
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var that = this;
      
      function initialize() {
        that._input = input;
        that._pos = 0;
        that._rightmostMatchFailuresPos = 0;
        that._rightmostMatchFailuresExpected = [];
        that._cache = {};
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }
        
        var expected = buildExpected(that._rightmostMatchFailuresExpected);
        var pos = Math.max(that._pos, that._rightmostMatchFailuresPos);
        var actual = pos < that._input.length
          ? that._quoteString(that._input.charAt(pos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var input = that._input;
        var pos = that._rightmostMatchFailuresPos;
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < pos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      initialize();
      
      var initialContext = {
        reportMatchFailures: true
      };
      
      var result = this['_parse_' + this._startRule](initialContext);
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |that._pos === input.length|
       *    - |that._rightmostMatchFailuresExpected.length| may or may not contain
       *      something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |that._pos < input.length|
       *    - |that._rightmostMatchFailuresExpected.length| may or may not contain
       *      something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |that._pos === 0|
       *   - |that._rightmostMatchFailuresExpected.length| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || this._pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
