grammar CitrusPEG
  rule grammar
    space* grammar_name rules:(space* grammar_rule)+ space*
  end
                               
  rule grammar_name
    "grammar " object_identifier
  end

  rule grammar_rule
    identifier assignment parsing_expression 
  end

  rule assignment
    space+ "<-" space+
  end

  rule parsing_expression
    choice_expression | choice_part
  end

  rule parenthesised_expression
    "(" space* parsing_expression space* ")"
  end

  rule choice_expression
    first_part:choice_part rest:(space+ "/" space+ expression:choice_part)+
  end

  rule choice_part
    (sequence_expression | sequence_part) (space+ type_expression)?
  end
                               

  rule type_expression
    "<" object_identifier ">"
  end

  rule sequence_expression
    first_part:sequence_part rest:(space+ expression:sequence_part)+
  end

  rule sequence_part
    label? expression:(quantified_atom | atom) 
  end

  rule quantified_atom
    atom quantifier 
  end

  rule atom
    parenthesised_expression | predicated_atom | reference_expression | string_expression | ci_string_expression | any_char_expression | char_class_expression
  end

  rule predicated_atom
    predicate:("&" | "!") atom 
  end

  rule reference_expression
    identifier !assignment 
  end

  rule string_expression
    "\"" ("\\" . | [^"])* "\"" 
  end

  rule ci_string_expression
    "`" ("\\" . | [^`])* "`" 
  end

  rule any_char_expression
    "." 
  end

  rule char_class_expression
    "[" "^"? ("\\" . | [^\]])+ "]" 
  end

  rule label
    identifier ":"
  end

  rule object_identifier
    identifier ("." identifier)*
  end

  rule identifier
    [a-zA-Z_] [a-zA-Z0-9_]*
  end

  rule quantifier
    "?" | "*" | "+"
  end

  rule space
    [\s]
  end
end
