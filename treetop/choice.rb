# Autogenerated from a Treetop grammar. Edits may be lost.


module Choice
  include Treetop::Runtime

  def root
    @root ||= :root
  end

  module Root0
    def word
      elements[0]
    end

    def type
      elements[1]
    end
  end

  module Root1
  end

  def _nt_root
    start_index = index
    if node_cache[:root].has_key?(index)
      cached = node_cache[:root][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    r3 = _nt_word
    s2 << r3
    if r3
      r4 = _nt_type
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Root0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r5 = _nt_word
      if r5
        r1 = r5
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      if has_terminal?("bar", false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("bar")
        r6 = nil
      end
      s0 << r6
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Root1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:root][start_index] = r0

    r0
  end

  def _nt_word
    start_index = index
    if node_cache[:word].has_key?(index)
      cached = node_cache[:word][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("word", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure("word")
      r0 = nil
    end

    node_cache[:word][start_index] = r0

    r0
  end

  def _nt_type
    start_index = index
    if node_cache[:type].has_key?(index)
      cached = node_cache[:type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("type", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure("type")
      r0 = nil
    end

    node_cache[:type][start_index] = r0

    r0
  end

end

class ChoiceParser < Treetop::Runtime::CompiledParser
  include Choice
end


