# Autogenerated from a Treetop grammar. Edits may be lost.


module Labels
  include Treetop::Runtime

  def root
    @root ||= :labels
  end

  module Labels0
    def letter
      elements[1]
    end
  end

  module Labels1
    def first_letter
      elements[0]
    end

    def rest_letters
      elements[1]
    end
  end

  module Labels2
    def letters
      [first_letter] + rest_letters.elements.map { |e| e.letter }
    end
  end

  def _nt_labels
    start_index = index
    if node_cache[:labels].has_key?(index)
      cached = node_cache[:labels][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?(', ', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure(', ')
          r4 = nil
        end
        s3 << r4
        if r4
          if has_terminal?('\G[a-z]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Labels0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Labels1)
      r0.extend(Labels2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:labels][start_index] = r0

    r0
  end

end

class LabelsParser < Treetop::Runtime::CompiledParser
  include Labels
end


