grammar Canopy.MetaGrammar

  grammar                   <- _* grammar_name
                               rules:(_* grammar_rule)+ _*
                               <Grammar>

  grammar_name              <- `grammar` ":"? _+ object_identifier

  grammar_rule              <- identifier assignment parsing_expression <GrammarRule>

  assignment                <- _+ "<-" _+

  parsing_expression        <- choice_expression / choice_part

  parenthesised_expression  <- "(" _* parsing_expression _* ")"

  choice_expression         <- first_part:choice_part
                               rest:(_+ "/" _+ expression:choice_part)+
                               <Choice>

  choice_part               <- (action_expression / sequence_expression / sequence_part)
                               (_+ type_tag)?
                               <ChoicePart>

  action_expression         <- actionable_expression _+ action_tag <Action>

  actionable_expression     <- "(" _* actionable_expression _* ")"
                             / sequence_expression
                             / repeated_atom
                             / terminal_node

  action_tag                <- "%" identifier

  type_tag                  <- "<" object_identifier ">"

  sequence_expression       <- first_part:sequence_part
                               rest:(_+ expression:sequence_part)+
                               <Sequence>

  sequence_part             <- label? expression:(maybe_atom / repeated_atom / atom) <SequencePart>

  maybe_atom                <- atom "?" <Maybe>

  repeated_atom             <- atom quantifier:("*" / "+") <Repeat>

  atom                      <- parenthesised_expression
                             / predicated_atom
                             / reference_expression
                             / terminal_node

  terminal_node             <- string_expression
                             / ci_string_expression
                             / char_class_expression
                             / any_char_expression

  predicated_atom           <- predicate:("&" / "!") atom <Predicate>

  reference_expression      <- identifier !assignment <Reference>

  string_expression         <- ('"' ("\\" . / [^"])* '"' / "'" ("\\" . / [^'])* "'") <String>

  ci_string_expression      <- "`" ("\\" . / [^`])* "`" <CIString>

  any_char_expression       <- "." <AnyChar>

  char_class_expression     <- "[" "^"? ("\\" . / [^\]])+ "]" <CharClass>

  label                     <- identifier ":"

  object_identifier         <- identifier ("." identifier)*

  identifier                <- [a-zA-Z_] [a-zA-Z0-9_]*

  _                         <- [\s]
