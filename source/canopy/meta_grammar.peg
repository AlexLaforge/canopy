grammar Canopy.MetaGrammar
  
  grammar             <- space* grammar_name
                         rules:(space* grammar_rule)+ space*
                         <Canopy.Compiler.Grammar>
  
  grammar_name        <- "grammar " object_identifier
  
  grammar_rule        <- identifier assignment parsing_expression
                         <Canopy.Compiler.GrammarRule>
  
  assignment          <- space+ "<-" space+
  
  parsing_expression  <- choice_expression / choice_part
  
  parenthesised_expression <- "(" space* parsing_expression space* ")"
  
  choice_expression   <- first_part:choice_part
                         rest:(space+ "/" space+ expression:choice_part)+
                         <Canopy.Compiler.Choice>
  
  choice_part         <- (sequence_expression / sequence_part)
                         (space+ type_expression)?
                         <Canopy.Compiler.ChoicePart>
  
  type_expression     <- "<" object_identifier ">"
  
  sequence_expression <- first_part:sequence_part
                         rest:(space+ expression:sequence_part)+
                         <Canopy.Compiler.Sequence>
  
  sequence_part       <- label? expression:(quantified_atom / atom)
                         <Canopy.Compiler.SequencePart>
  
  quantified_atom     <- atom quantifier <Canopy.Compiler.Repeat>
  
  atom                <- parenthesised_expression
                       / predicated_atom
                       / reference_expression
                       / string_expression
                       / any_char_expression
                       / char_class_expression
  
  predicated_atom     <- predicate:("&" / "!") atom
                         <Canopy.Compiler.PredicatedAtom>
  
  reference_expression <- identifier !assignment <Canopy.Compiler.Reference>
  
  string_expression   <- "\"" ("\\" . / [^"])* "\""
                         <Canopy.Compiler.String>
  
  any_char_expression <- "." <Canopy.Compiler.AnyChar>
  
  char_class_expression <- "[" "^"? ("\\" . / [^\]])+ "]"
                           <Canopy.Compiler.CharClass>
  
  label               <- identifier ":"
  
  object_identifier   <- identifier ("." identifier)*
  
  identifier          <- [a-zA-Z_$] [a-zA-Z0-9_$]*
  
  quantifier          <- "?" / "*" / "+"
  
  space               <- [\s\n\r\t]

